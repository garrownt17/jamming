{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","inherits","createClass","key","value","onSearch","event","setState","target","react_default","a","createElement","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","apply","arguments","tracks","map","Track_Track_Track","id","SearchResults","TrackList_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenURI","window","location","href","match","expiresInURI","expiresIn","parseInt","setTimeout","history","pushState","fetch","concat","headers","Authorization","then","response","json","jsonResponse","console","log","items","artists","uri","savePlaylist","playlistName","trackURIs","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","savedTracks","find","savedTrack","push","newTracks","filter","length","document","getElementById","_this2","results","SearchBar_SearchBar_SearchBar","SearchResults_SearchResults_SearchResults","Playlist_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dfb77861.chunk.js","sourcesContent":["// Object Model: https://developer.spotify.com/documentation/web-api/reference/object-model/\r\n\r\nlet accessToken;\r\nlet clientId = 'f0f1235359a74490a0527dc3367a5f23'; // Spotify Client ID\r\nconst redirectUri = 'https://garrownt17.github.io/jamming/build/'; // Return to portfolio site\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if(accessToken) {\r\n      return accessToken;\r\n    }\r\n    const accessTokenURI = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInURI = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if(accessTokenURI && expiresInURI) {\r\n      accessToken = accessTokenURI[1];\r\n      const expiresIn = parseInt(expiresInURI[1], 10);\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/'); // Set timeout to refresh accessToken so new token can be saved when needed\r\n      return accessToken;\r\n    } else {\r\n      window.location = 'https://accounts.spotify.com/authorize?client_id='+clientId+'&response_type=token&scope=playlist-modify-public&redirect_uri='+redirectUri;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response=> {\r\n      return response.json();\r\n    }).then(jsonResponse=> {\r\n      if(!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      console.log(\"searching\");\r\n\r\n      return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artists[0].name,\r\n        album: track.album.name,\r\n        uri: track.uri\r\n      }));\r\n    });\r\n  },\r\n\r\n  savePlaylist(playlistName, trackURIs) {\r\n    if(!playlistName || !trackURIs) {\r\n      console.log(\"Not saving playlist\");\r\n      return;\r\n    }\r\n    console.log(playlistName);\r\n    const playlistToken = Spotify.getAccessToken();\r\n    const headers = {\r\n      Authorization: `Bearer ${accessToken}`\r\n    }\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}).then(response=>{\r\n      return response.json();\r\n    }).then(jsonResponse=>{\r\n      userId = jsonResponse.id;\r\n      console.log(userId);\r\n      return fetch('https://api.spotify.com/v1/users/'+userId+'/playlists', {\r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({name: playlistName})\r\n      }).then(response=>response.json()).then(jsonResponse=>{\r\n        const playlistId = jsonResponse.id;\r\n        console.log(jsonResponse);\r\n        return fetch('https://api.spotify.com/v1/users/'+userId+'/playlists/'+playlistId+'/tracks', {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({uris: trackURIs})\r\n        });\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nexport class SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: ''\r\n    }\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n\r\n  }\r\n\r\n  search() {\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({term: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Track.css';\r\n\r\nexport class Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  addTrack(event) {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack(event) {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  renderAction() {\r\n    if (!this.props.isRemoval) {\r\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\r\n    }\r\n    return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {Track} from '../Track/Track';\r\nimport './TrackList.css';\r\n\r\nexport class TrackList extends React.Component {\r\n  render() {\r\n    // sort tracks from SearchResults and Playlist\r\n    if(!this.props.isRemoval) {\r\n      return (\r\n        <div className=\"TrackList\">\r\n          {this.props.tracks.map(track=>{\r\n            return <Track key={track.id} track={track} onAdd={this.props.onAdd} isRemoval={this.props.isRemoval}/>\r\n          })}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div className=\"TrackList\">\r\n          {this.props.tracks.map(track=>{\r\n            return <Track key={track.id} track={track} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval}/>\r\n          })}\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {TrackList} from '../TrackList/TrackList';\r\nimport './SearchResults.css';\r\n\r\nexport class SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\" >\r\n        <h2>Results</h2>\r\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {TrackList} from '../TrackList/TrackList';\r\nimport './Playlist.css';\r\n\r\nexport class Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(event) {\r\n    this.props.onNameChange(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input id='playlist-name' defaultValue={\"New Playlist\"} onChange={this.handleNameChange}/>\r\n        <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport {SearchBar} from '../SearchBar/SearchBar';\nimport {SearchResults} from '../SearchResults/SearchResults';\nimport {Playlist} from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistTracks: [],\n      playlistName: 'New Playlist'\n    };\n\n    // Bind new methods\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let savedTracks = this.state.playlistTracks;\n    if (!savedTracks.find(savedTrack => savedTrack.id === track.id)) {\n      savedTracks.push(track);\n      this.setState({playlistTracks: savedTracks});\n    }\n  }\n\n  removeTrack(track) {\n    console.log('Running Removal');\n    let savedTracks = this.state.playlistTracks;\n    let newTracks = savedTracks.filter(savedTrack => savedTrack.id !== track.id);\n    this.setState({playlistTracks: newTracks});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    let tracks = this.state.playlistTracks;\n    let name = this.state.playlistName;\n    if(this.state.playlistTracks.length && this.state.playlistName) {\n      let trackURIs = tracks.map(track=>track.uri);\n      Spotify.savePlaylist(name, trackURIs);\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    document.getElementById(\"playlist-name\").value = 'New Playlist';    \n  }\n  }\n\n  search(term) {\n    Spotify.search(term).then(results=>{\n      this.setState({searchResults: results});\n    });\n  }\n\n  render() {\n    return (\n      <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n        <SearchBar onSearch={this.search}/>\n        <div className=\"App-playlist\">\n          <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n          <Playlist playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist}/>\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}